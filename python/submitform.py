#!/usr/bin/python
# encoding : utf-8
# -*- coding: utf-8 -*-
import os
import tempfile
import cgi
import cgitb
import cStringIO
from cgi import escape
from urlparse import parse_qs
from cgi import parse_multipart
from cgi import parse
from cgi import parse_multipart
from flup.server.fcgi import WSGIServer
import pdfgen
import pdfval
import sendmail
import re # regex

# Define directory in which to store applicant information
appdir = '/var/www/technion3ds-applicant-data/'

cgitb.enable(display=0, logdir="/tmp")  # use this to NOT display error log on user's web page
# cgitb.enable()        # use this to display error log on user's web page

# TODO: update html_header and html_footer with the new styls generated by scons
html_header = """<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Technion 3DS | Thanks
    </title>
    <meta name="viewport" content="width=device-width">
    <meta name="description" content="Official Technion 3DS Website">
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/bootstrap-responsive.min.css">
    <link rel="stylesheet" href="/styles/style.css">
  </head>
  <body data-spy="scroll" data-target=".subnav" data-offset="90" class="apply undefined">
    <div class="navbar navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container"><a data-toggle="collapse" data-target=".nav-collapse" class="btn btn-navbar"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></a><a href="/" class="brand">Technion 3DS</a>
          <div class="nav-collapse">
            <ul class="nav">
              <li class="undefined"><a href="/">Home</a></li>
              <li class="undefined"><a href="/info/">Event Info</a></li>
              <li class="undefined"><a href="/faq/">FAQ</a></li>
              <li style="font-weight:bold" class="active"><a href="/apply/">Apply</a></li>
              <li class="undefined"><a href="/sponsor/">Sponsor</a></li>
              <li class="undefined"><a href="/about/">About</a></li>
            </ul><img src="/images/logo-32-white.png" class="nav-logo pull-right">
          </div>
        </div>
      </div>
    </div>
    <div class="container content-container">
      <div class="row">
        <div class="content main-content span9">
          <h1>%s</h1>
          """

# the above "<h1>%s</h1>" gives a blank to show "Success" or "Error".

html_footer = """
        </div>
        <div class="aside span3">
          <!---->
          <!-- TODO: add social media networks-->
          <!---->
          <div id="social" class="well">
            <p style="text-align:center">Follow us on <a href="http://www.facebook.com/3DayStartupIsrael" target="_blank"><i class="just-vector">F</i> Facebook</a> &amp; <a href="https://twitter.com/3DSIsrael" target="_blank"><i class="just-vector">t</i> Twitter</a>!</p>
          </div>
          <div id="event-details" class="well">
            <h3><a href="/info/" style="color:inherit;font-size:22px">Event Details</a></h3>
            <table style="margin-bottom:10px" class="table table-condensed">
              <tbody>
                <tr>
                  <th>Time</th>
                  <td>June 5 &ndash; 7, 2013<br>(runs sixty hours from Wed morning to Fri afternoon)</td>
                </tr>
                <tr>
                  <th>Venue</th>
                  <td>Meyer Building<br>Technion, Haifa</td>
                </tr>
              </tbody>
            </table>
            <p style="margin-bottom:0"><b>Key outcomes</b></p>
            <ul style="margin-bottom:20px">
              <li>Meet smart people</li>
              <li>Enjoy free food and good friends</li>
              <li>Learn about entrepreneurship</li>
              <li>Push your abilities &amp; limits</li>
              <li>Start real high-tech company</li>
              <li>Make real product / service</li>
              <li>Get funding (if good enough!)</li>
            </ul>
            <p><a href="/about/#students">Recruiting</a>: <a href="&#109;&#097;&#105;&#108;&#116;&#111;&#058;&#114;&#101;&#099;&#114;&#117;&#105;&#116;&#105;&#110;&#103;&#064;&#116;&#101;&#099;&#104;&#110;&#105;&#111;&#110;&#051;&#100;&#115;&#046;&#111;&#114;&#103;"><i class="icon-envelope"></i></a><br><a href="/about/#students">Sponsorship</a>: Kobi Barac <a href="&#109;&#097;&#105;&#108;&#116;&#111;&#058;&#115;&#112;&#111;&#110;&#115;&#111;&#114;&#115;&#104;&#105;&#112;&#064;&#116;&#101;&#099;&#104;&#110;&#105;&#111;&#110;&#051;&#100;&#115;&#046;&#111;&#114;&#103;"><i class="icon-envelope"></i></a><br><a href="/about/#students">Chairman</a>: Shai Haim <a href="&#109;&#097;&#105;&#108;&#116;&#111;&#058;&#099;&#104;&#097;&#105;&#114;&#109;&#097;&#110;&#064;&#116;&#101;&#099;&#104;&#110;&#105;&#111;&#110;&#051;&#100;&#115;&#046;&#111;&#114;&#103;"><i class="icon-envelope"></i></a><br><a href="/about/#faculty-adviser">Faculty Adviser</a>: Daniel Freedman <a href="&#109;&#097;&#105;&#108;&#116;&#111;&#058;&#097;&#100;&#118;&#105;&#115;&#101;&#114;&#064;&#116;&#101;&#099;&#104;&#110;&#105;&#111;&#110;&#051;&#100;&#115;&#046;&#111;&#114;&#103;"><i class="icon-envelope"></i></a>
            </p>
          </div>
          <p style="text-align:center;color:#aaa;text-shadow:0 1px #fff">First in Student Startups</p>
          <p style="text-align:center;margin-bottom:0"><img src="/images/logo-32-grey.png" class="aside-logo"></p>
        </div>
      </div>
    </div>
    <div class="thru-container footer-container">
      <div class="container">
        <div class="footer">
          <p>&copy; 2013, Technion 3DS | 3-Day Startup - Learning by Doing</p>
          <p><a href="http://3daystartup.org/" target="_blank">Global 3DS Website</a></p>
        </div>
      </div>
    </div>
    <script src="/scripts/jquery-1.7.2.min.js"></script>
    <script src="/scripts/bootstrap.min.js"></script>
    <script src="/scripts/jquery.validate.min.js"></script>
    <script>
      $(function() {
        $('#apply-form').validate({
          rules: {
            resume: {
              accept: 'pdf'
            }
          },
          submitHandler: function(form) {
            form.submit();
          }
        });
        var requireAvaiExplain = function() {
          var $radioNo = $('#f-available-no');
          var $input = $('#f-available-no-explain');
          if ($radioNo.is(':checked')) {
            $input.attr('required', 'required');
          } else {
            $input.removeAttr('required');
          }
        };
        $('#f-available-no, #f-available-yes')
          .change(requireAvaiExplain)
          .focus(requireAvaiExplain);
        $('#f-available-no-explain')
          .focus(requireAvaiExplain)
          .click(requireAvaiExplain);
      });
    </script>
    <script src="/scripts/html5shiv.js"></script>
    <script>
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-XXXXXXXX-X']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
    </script>
  </body>
</html>
"""

# Global fields to store data.
data = {}
files = {}
name = 0
value = 0
form = 0
response_body = ""

# TODO header / body repeat!
def Fail(start_response):
    global response_body
    response_body += html_footer
    response_body = response_body % "Error"
    status = '200 OK'
    response_headers = [('Content-Type', 'text/html'),
                  ('Content-Length', str(len(response_body)))]
    start_response(status, response_headers)
    return [response_body]

def Success(start_response):
    global response_body
    # response_body += "<p>Thank you for your application.</p>"
    # response_body += html_footer
    # response_body = response_body % "You did it!"
    status = '301 Moved'
    response_body = ''
    response_headers = [('Location','http://www.technion3ds.org/apply/thanks/')] # HTTP Headers
    # response_body = ''
    # response_headers = [('Content-Type', 'text/html'),
    #               ('Content-Length', str(len(response_body)))]

    start_response(status, response_headers)
    return [response_body]


def printError(show):
    global response_body
    response_body+= "<p>The <strong>"+show+"</strong> field is not properly filled.</p>"

# More protection later
# dangerous = ['\\', '*', '~']
dangerous = []
def GetValue(name):
    global dangerous
    global response_body
    global form
    if name not in form:
        return -1

    value = form.get(name, [])
    ret = ""
    if len(value) == 1:
        ret = value[0]
    else:
        ret = '\n  - ' + '\n  - '.join(value)

    # Always escape user input to avoid script injection
    escape(ret)
    if len(ret) > 65535:
        response_body+= "<p>The paragraph is too long.</p>"
        return -1
    for d in dangerous:
        if d in ret:
            response_body+= "<p>Please do not include \'<strong>"+ d + "</strong>\' in any fields.</p>"
            return -1
    return ret

# TODO: Scott
# Return: -1: incomplete.
def GetFile(realname, formname, environ):
    global response_body
    global name
    global files

    name = realname
    if formname not in form:
        printError(realname)
        return -1

    # TASK: get the resume data from input field "formname",
    #  suppose the binary data of the uploaded data is "bin_file",
    # if success:
    #     files[name] = bin_file
    #     return 0 (or anything else)
    # if fail:
    #     return -1

    # You can use these following codes if you get a **FieldStorage** fs, containing resume data.

    fileitem = form[formname][0]
    # if len(fileitem) > 3.9 * 1024 * 1024 * 8:
    #     response_body += "<p>File", realname,"is larger than 4 MB. Please upload a smaller one.</p>"
    #     return -1
    files[name] = fileitem
    # if fileitem:
    #     # print 'file!'
    #     # It's an uploaded file; count lines
    #     # response_body += "file: "+name;
    #     linecount = 0
    #     while 1:
    #         line = fileitem.readline()
    #         if not line: break
    #         linecount = linecount + 1
    #         # response_body += "line: ",linecount
    #     if fileitem.done == -1:
    #         response_body += "<p>File", realname,"is broken.</p>"
    #         return -1
    #     # if pdfval.isPDF(fileitem.file):
    #     # return fileitem.done;
    #     files[realname] = fileitem
    return 0
    # return -1

def GetRequired(realname, formname):
    global response_body
    global name
    global value
    name = realname
    value = GetValue(formname)
    if value == -1:
        printError(name)
        return -1
    data[name] = value
    return 0

def GetOptional(realname, formname):
    global response_body
    global name
    global value
    name = realname
    value = GetValue(formname)
    if value == -1:
        value = "None"
    data[name] = value
    return 0

def GetMultiple(realname, array):
    global response_body
    global name
    global value
    name = realname
    value = []
    for formname in array:
        avalue = GetValue(formname)
        if avalue != -1:
            value.append(avalue)
    value = ', '.join(value)
    data[name] = value
    return 0


# main function
def application(environ, start_response):

    global response_body, data, files, name, value, form
    response_body = html_header
    data = {}
    files = {}
    name = 0
    value = 0
    form = 0

    # the environment variable CONTENT_LENGTH may be empty or missing
    try:
      request_body_size = int(environ.get('CONTENT_LENGTH', 0))
    except (ValueError):
      request_body_size = 0

    # When the method is POST the query string will be sent
    # in the HTTP request body which is passed by the WSGI server
    # in the file like wsgi.input environment variable.
    request_body = environ['wsgi.input'].read(request_body_size)

    # print environ['wsgi.input']

    ftest = tempfile.NamedTemporaryFile(dir=appdir, suffix="_request_body", delete=False)
    request_body_path = ftest.name
    ftest.write(request_body)
    ftest.close
    # print request_body

    sio = cStringIO.StringIO(request_body)

    ctype, pdict = cgi.parse_header(environ['CONTENT_TYPE'])
    # print pdict
    form = parse_multipart(sio, pdict)
    # {'website': [''], 'available': ['no'], 'major': ['Computer Science'], 'last-name': ['Shan'], 'degree': ['Undergraduate'], 'resume': ['%PDF-1.4\n%\xc7\xec\x8f\xa2\n5...

    # upfilecontent = form.get('resume')

    # if upfilecontent:
    #     # i don't know how to get the file name.. so i named it 'tmp.dat'
    #     ftest = tempfile.NamedTemporaryFile(dir=appdir, suffix='_resume.pdf', delete=False)
    #     fout.write(upfilecontent[0])
    #     fout.close()

    # print '========================================='
    # print form['resume']
    # print '========================================='
    # print form['first-name']

    if GetRequired("FirstName", "first-name") == -1:
        return Fail(start_response)
    if GetRequired("LastName", "last-name") == -1:
        return Fail(start_response)
    # data['Name'] = data["FirstName"] + ' ' + data["LastName"]
    if GetRequired("Email", "email") == -1:
        return Fail(start_response)
    if GetRequired("Available", "available") == -1:
        return Fail(start_response)
    if value != "yes":
        GetOptional("Explain", "available-explain")
    GetOptional("Website", "website")
    if GetRequired("Phone", "phone") == -1:
        return Fail(start_response)
    if GetRequired("Major", "major") == -1:
        return Fail(start_response)
    # if value == "What are you studying?":
    #     response_body+= "<p>The <strong>"+name+"</strong> field is not properly filled.</p>"
    #     return Fail(start_response)
    GetRequired("University", "university")
    GetRequired("Degree", "degree")

    GetOptional("Experience", 'experience')
    GetOptional("Familiar concepts", 'concept');
    GetOptional("Position", 'position');
    if "Other" in value:
        GetOptional("position-other", "position-other")
        data['Position'] = ': '.join([data['Position'], data['position-other']])

    # GetMultiple("Plan", ["write-software"]);
    if GetRequired("Work Samples", "sample") == -1:
        return Fail(start_response)

    if GetFile("Resume", "resume", environ) == -1:
        return Fail(start_response)
    if GetRequired("Motivation", "motivation") == -1:
        return Fail(start_response)
    if GetRequired("Ideas", "ideas") == -1:
        return Fail(start_response)

    GetOptional("Additional",'additional');

    GetOptional("Hear from", 'channel');
    if "Other" in value:
        GetOptional("channel-other", "channel-other")
        data['Hear from'] = ': '.join([data['Hear from'], data['channel-other']])

    # ======= Handling ===========

    # Aggregating data: ret contains the output txt data
    order = ['FirstName', 'LastName', 'Email', 'Phone', 'Website', 'Available', 'Explain', 'Major', 'University', 'Degree', 'Experience', 'Familiar concepts', 'Position', 'Work Samples', 'Motivation', 'Ideas', 'Additional','Hear from']

    ret = ""
    for x in order:
        if x not in data:
          continue
        v = data[x]
        if (len(v) < 72) or ('\n' not in v):
          ret+= "* "+x+": "+v+"\n"
        else:
          ret+= "* "+x+": "+"\n" + v + "\n"
        ret += "\n"

    smallorder = ['FirstName', 'LastName', 'Email', 'Phone', 'Website', 'Available', 'Explain', 'Major', 'University', 'Degree']

    mailcontent = ""
    for x in smallorder:
        if x not in data:
          continue
        v = data[x]
        if (len(v) < 72) or ('\n' not in v):
          mailcontent+= "* "+x+": "+v+"\n"
        else:
          mailcontent+= "* "+x+": "+"\n" + v + "\n"
        mailcontent += "\n"

    # Obtain unique applicant ID
    try:
        fin = open(appdir + "applicant_num.txt", 'r')
        line = fin.readline()
        fin.close()
        appid = int(line)
    except (IOError):
        appid = 1
    myappid = appid
    vmyappid = str(myappid)

    abbr = {
        'Computer Science':'CS',
        'Electrical Engineering':'EE',
        'Business (Industrial Engineering / Management / Economics / MBA)':'BUS',
        'Design (Architecture / Graphic / Industrial)':'DSGN',
        'Math':'MATH',
        'Physics':'PHYS',
        'Chemistry':'CHEM',
        'Biology':'BIO',
        'Biomedical Engineering':'BIOMED',
        'Materials Science and Engineering':'MATSCI',
        'Mechanical Engineering':'MECH',
        'Aerospace Engineering':'AERO',
        'Chemical Engineering':'CHEME',
        'Civil and Environmental Engineering':'CIVIL',
        'Biotechnology and Food Engineering':'FOOD',
        'Medicine':'MED',
        'Education in Science and Technology':'EDU',
        'Humanities and Arts':'HUMARTS',
        'Undergraduate': 'UG',
        'Master': 'MS',
        'PhD': 'PhD'
        }

    vname = (data["FirstName"]+'_'+data['LastName'])[:20]
    vuni = data["University"][:10]
    vmajor = abbr[data["Major"]]
    vdeg = abbr[data["Degree"]]

    # Protect against injection attacks (security issue)
    vname = re.sub(r'[^a-zA-Z_0-9]', '_', vname)
    vuni = re.sub(r'[^a-zA-Z_0-9]', '_', vuni)
    # vmajor = re.sub(r'[^a-zA-Z_0-9]', '_', vmajor)

    filename = "_".join([vmyappid, vname, vuni, vmajor, vdeg])
    filename = re.sub(r'[^a-zA-Z_0-9]', '_', filename) # for injection

    fout = tempfile.NamedTemporaryFile(dir=appdir, suffix=filename + "_info.txt", delete=False)
    txt_path = fout.name
    fout.write(ret)
    fout.close()

    fout = tempfile.NamedTemporaryFile(dir=appdir, suffix=filename + "_resume.pdf", delete=False)
    resume_path = fout.name
    fout.write(files["Resume"])
    fout.close()

    # Check if the resume is in valid PDF format
    ispdf = pdfval.isPDF(resume_path)
    if ispdf != 1:
        os.remove(request_body_path)
        os.remove(txt_path)
        os.remove(resume_path)
        response_body+= "<p>Your uploaded resume is not valid PDF format.</p>"
        return Fail(start_response)

    # Generate a single, final PDF file with applicant metadata
    # combined with applicant-submitted resume (also clean up
    # intermediary files)
    output_path = appdir + filename + ".pdf"
    try:
        pdfgen.generate2(txt_path, resume_path, output_path)
        os.remove(request_body_path)
        os.remove(txt_path)
        os.remove(resume_path)
    except:
        response_body+= "<p>Error on processing your uploaded information.  Please contact us offline.</p>"
        return Fail(start_response)

    # Send email with attached application form (provided as PDF file
    # at 'output_path') to 3DS leadership
    sendmail.send_mail('no-reply@technion3ds.org',
        ['apply@technion3ds.org', 'chairman@technion3ds.org'],
        'Application from ' + vmyappid + '_' + vname,
        mailcontent, [output_path])

    # Send confirmation email to applicant
    sendmail.send_mail('no-reply@technion3ds.org',
        [re.sub(r'[^a-zA-Z_0-9@.+\-]', '_', data['Email'][:255])],
        'Confirmation of Technion 3DS application for ' + vname,
        'This email confirms your successful application to Technion 3DS.  If\nyou have any questions, please contact our recruiting chair at <recruiting@technion3ds.org>.  We will be in touch with\nyou with selection results within aproximately a week.\n\nThanks again,\nThe Technion 3DS Organizing Committee\n', [])

    # Create single atomic entry listing info for applicant
    fcsv = open(appdir + filename + "_summary.csv", 'w')
    keys = ['FirstName','LastName','Email','Phone','Website','Available','Major','University','Degree']
    infos = [vmyappid]
    for x in keys:
        v = data[x][:255]
        v = re.sub(r'[^a-zA-Z_0-9]', '_', v)
        infos.append(v)
    print >>fcsv, ';'.join(infos)
    fcsv.close()

    # Update the applicant number now that we're assured success
    appid = appid + 1
    fout = open(appdir + "applicant_num.txt", 'w')
    fout.write(str(appid))
    fout.close()

    # Only use this when the service is ready to process
    # applications. Otherwise please use the code below.
    return Success(start_response)
    # If the service is *NOT* yet ready, use the following two lines...
    # response_body+= "<p>We apologize that we cannot process your resume, our online service is not yet fully deployed. Please contact <apply@technion3ds.org> and try to resubmit your information later.</p>"
    # return Fail(start_response)

if __name__  == '__main__':
    WSGIServer(application, bindAddress=('127.0.0.1',9000)).run()
